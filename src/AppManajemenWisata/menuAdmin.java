/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package AppManajemenWisata;


import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Acer
 */
public class menuAdmin extends javax.swing.JFrame {

    private DefaultTableModel model;
    public menuAdmin() {
        initComponents();
        Kolom();
        dataEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        data = new javax.swing.JTable();
        dataShow = new javax.swing.JPanel();
        gambar = new javax.swing.JLabel();
        kode = new javax.swing.JLabel();
        biaya = new javax.swing.JLabel();
        tema = new javax.swing.JLabel();
        lokasi = new javax.swing.JLabel();
        tanggal = new javax.swing.JLabel();
        id = new javax.swing.JLabel();
        TDelete = new javax.swing.JButton();
        ICari = new javax.swing.JTextField();
        TCari = new javax.swing.JButton();
        TSimpan = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel1.setText("Perjalanan dan Wisata");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(30, 40, 170, 30);

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel2.setText("Menu Data Admin ");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(30, 20, 130, 30);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppManajemenWisata/img/logo4.png"))); // NOI18N
        jPanel2.add(jLabel3);
        jLabel3.setBounds(620, 20, 148, 60);

        data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        data.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(data);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(20, 282, 760, 270);

        dataShow.setBorder(javax.swing.BorderFactory.createTitledBorder("Informasi"));
        dataShow.setLayout(null);

        gambar.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        gambar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gambar.setText("Gambar");
        gambar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataShow.add(gambar);
        gambar.setBounds(270, 60, 140, 110);

        kode.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        kode.setText("Kode");
        kode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataShow.add(kode);
        kode.setBounds(10, 60, 120, 30);

        biaya.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        biaya.setText("Biaya");
        biaya.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataShow.add(biaya);
        biaya.setBounds(140, 60, 120, 30);

        tema.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tema.setText("Tema");
        tema.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataShow.add(tema);
        tema.setBounds(10, 100, 250, 30);

        lokasi.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lokasi.setText("Destinasi");
        lokasi.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataShow.add(lokasi);
        lokasi.setBounds(10, 140, 140, 30);

        tanggal.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tanggal.setText("Tanggal");
        tanggal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataShow.add(tanggal);
        tanggal.setBounds(160, 140, 100, 30);

        id.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        id.setText("ID");
        id.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataShow.add(id);
        id.setBounds(10, 20, 120, 30);

        jPanel2.add(dataShow);
        dataShow.setBounds(30, 80, 420, 180);

        TDelete.setText("Delete");
        TDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(TDelete);
        TDelete.setBounds(590, 180, 90, 30);
        jPanel2.add(ICari);
        ICari.setBounds(460, 230, 230, 30);

        TCari.setText("Cari");
        TCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TCariActionPerformed(evt);
            }
        });
        jPanel2.add(TCari);
        TCari.setBounds(700, 230, 80, 30);

        TSimpan.setText("Buat Event");
        TSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TSimpanActionPerformed(evt);
            }
        });
        jPanel2.add(TSimpan);
        TSimpan.setBounds(690, 180, 90, 30);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(50, 40, 800, 570);

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppManajemenWisata/img/back.png"))); // NOI18N
        back.setBorderPainted(false);
        back.setContentAreaFilled(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(0, 0, 50, 50);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppManajemenWisata/img/close.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(850, 0, 50, 50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataMouseClicked
        // TODO add your handling code here:
        int i = data.getSelectedRow();
        
        if (i>-1){
            kode.setText(model.getValueAt(i, 1).toString());
            tema.setText(model.getValueAt(i, 2).toString());
            lokasi.setText(model.getValueAt(i,3).toString());
            tanggal.setText(model.getValueAt(i, 4).toString());
            biaya.setText("Rp. " + model.getValueAt(i, 5).toString());
            String imgPath = model.getValueAt(i, 8).toString();
            id.setText(model.getValueAt(i, 9).toString());
            
            java.net.URL imgURL = getClass().getResource("/AppManajemenWisata/img/" + imgPath);
            if (imgURL != null) {
                ImageIcon icon = new ImageIcon(imgURL);
                gambar.setIcon(icon);
            } else {
                System.err.println("Couldn't find file: " + imgPath);
                gambar.setIcon(null);
            }
        }
    }//GEN-LAST:event_dataMouseClicked

    private void TDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TDeleteActionPerformed
        // TODO add your handling code here:
        int id_mpw = Integer.parseInt(id.getText());
        Connection con = null;
        String imagePath = null;
        String kode_mpw = null;
        try {
            con = db.getConnection();
            con.setAutoCommit(false);
            Statement sts = con.createStatement();
            
            ResultSet rs = sts.executeQuery("SELECT image_mpw, kode_mpw FROM tb_data WHERE id_mpw = " + id_mpw);
            if (rs.next()) {
                imagePath = rs.getString("image_mpw");
                kode_mpw = rs.getString("kode_mpw");
            }else {
                throw new SQLException("Data dengan id_mpw " + id_mpw + " tidak ditemukan di tb_data.");
            }
            sts.executeUpdate("DELETE FROM tb_booking WHERE kode_mpw = '" + kode_mpw +"'");
            sts.executeUpdate("DELETE FROM tb_data WHERE id_mpw = " + id_mpw);
            con.commit();
            if (imagePath != null) {
                File imageFile = new File("/AppManajemenWisata/img/" + imagePath);
                if (imageFile.exists()) {
                   if (imageFile.exists()) {
                        if (!imageFile.delete()) {
                            throw new IOException("Gagal menghapus file gambar: " + imageFile.getAbsolutePath());
                        }
                    } else {
                        throw new IOException("File gambar tidak ditemukan: " + imageFile.getAbsolutePath());
                    }
                }
            }
            Kolom();
            dataEvent();
            JOptionPane.showMessageDialog(null, "Data dan gambar berhasil dihapus.");
        } catch (SQLException ex) {
            if (con != null) {
                try {
                    con.rollback();
                } catch (SQLException rollbackEx) {
                    rollbackEx.printStackTrace();
                }
            }
            JOptionPane.showMessageDialog(null, "Terjasi kesalahan pada Database : "  + ex.getMessage());
        }catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan pada file: " + ex.getMessage());
        }
        finally {
            if (con != null) {
                try {
                    con.setAutoCommit(true); // Kembali ke mode auto-commit
                    con.close(); // Tutup koneksi
                } catch (SQLException closeEx) {
                    closeEx.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_TDeleteActionPerformed

    private void TSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TSimpanActionPerformed
        // TODO add your handling code here:
        if (loginForm.userRole.equals("admin")) {
            new mngData().setVisible(true);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Hanya Admin yang bisa akses!!");
        }
    }//GEN-LAST:event_TSimpanActionPerformed

    private void TCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TCariActionPerformed
        // TODO add your handling code here:
        cari();
    }//GEN-LAST:event_TCariActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        dataForm dataForm = new dataForm();
        dataForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_backActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Frame frame = new JFrame("Exit");

        if (JOptionPane.showConfirmDialog(frame, "Yakin pengen keluar??",
            "Aplikasi", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION){
        System.exit(0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menuAdmin().setVisible(true);
            }
        });
    }
    private void Kolom(){
        int lebarKolom [] = {20, 70, 120, 100, 50, 80, 150,70};
        String [] field = {"No","Kode MPW","Tema MPW","Lokasi MPW","Tanggal","Harga","Kegiatan","Action","Image","ID MPW"};
        model = new DefaultTableModel (field, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 7;
            }
        };
        data.setModel(model);
        data.getTableHeader().setBackground(new Color(255,151,0));
        data.getTableHeader().setForeground(new Color(255,255,255));
        data.getTableHeader().setFont(new Font("Poppins",Font.PLAIN, 12));
        for (int i = 0; i < lebarKolom.length; i++) {
            data.getColumnModel().getColumn(i).setPreferredWidth(lebarKolom[i]);
        }
        data.getColumnModel().getColumn(8).setMinWidth(0);
        data.getColumnModel().getColumn(8).setMaxWidth(0);
        data.getColumnModel().getColumn(8).setWidth(0);
        data.getColumnModel().getColumn(9).setMinWidth(0);
        data.getColumnModel().getColumn(9).setMaxWidth(0);
        data.getColumnModel().getColumn(9).setWidth(0);
        
        data.getColumnModel().getColumn(7).setCellRenderer(new ButtonRenderer());
        data.getColumnModel().getColumn(7).setCellEditor(new ButtonEditor(new JCheckBox()));
        
    }
    private void dataEvent() {
         try {
            Connection con = db.getConnection();
            ResultSet res = con.createStatement().executeQuery("SELECT kode_mpw, tema_mpw, lokasi_mpw, tgl_mpw, biaya_mpw, kegiatan_mpw, image_mpw, id_mpw FROM tb_data");
            int no = 1;
            while(res.next()){
                String kodeMPW = res.getString(1);
                String temaMPW = res.getString(2);
                String lokasiMPW = res.getString(3);
                String tglMPW = res.getString(4);
                String biayaMPW = res.getString(5);
                String kegiatanMPW = res.getString(6);
                String imageMPW = res.getString(7);
                String idMPW = res.getString(8);
                JButton editButton = new JButton("edit");
                editButton.addActionListener(e -> {
                    editForm(kodeMPW, temaMPW, lokasiMPW, tglMPW, biayaMPW, kegiatanMPW, imageMPW, idMPW);
                    dispose();
                });
                
                Object [] data =  {String.valueOf(no), kodeMPW, temaMPW, lokasiMPW, tglMPW, biayaMPW, kegiatanMPW, editButton, imageMPW, idMPW};
                model.addRow(data);
                no++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(dataForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void editForm(String kodeMPW, String temaMPW, String lokasiMPW, String tglMPW, String biayaMPW, String kegiatanMPW, String imageMPW, String idMPW) {
        editForm EditFormData = new editForm(kodeMPW, temaMPW, lokasiMPW, tglMPW, biayaMPW, kegiatanMPW, imageMPW, idMPW);
        EditFormData.setVisible(true);
    }
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Edit");
            setFont(new java.awt.Font("Poppins", 0, 12));
            setForeground(Color.WHITE);
            setBackground(new Color(255, 153, 0));
            return this;
        }
    }
    class ButtonEditor extends DefaultCellEditor {
        private JButton button;
        private String label;
        private boolean isPushed;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            button.setText("Edit");
            isPushed = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                int selectedRow = data.getSelectedRow();
                String kodeMPW = (String) model.getValueAt(selectedRow, 1);
                String temaMPW = (String) model.getValueAt(selectedRow, 2);
                String lokasiMPW = (String) model.getValueAt(selectedRow, 3);
                String tglMPW = (String) model.getValueAt(selectedRow, 4);
                String biayaMPW = (String) model.getValueAt(selectedRow, 5);
                String kegiatanMPW = (String) model.getValueAt(selectedRow, 6);
                String imageMPW = (String) model.getValueAt(selectedRow, 8);
                String idMPW = (String) model.getValueAt(selectedRow, 9);

                editForm(kodeMPW, temaMPW, lokasiMPW, tglMPW, biayaMPW, kegiatanMPW, imageMPW, idMPW);
                menuAdmin.this.dispose();
            }
            isPushed = false;
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        @Override
        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
    private void cari() {
    String keyword = ICari.getText().trim();
    try {
        Connection con = db.getConnection();
        String query = "SELECT kode_mpw, tema_mpw, lokasi_mpw, tgl_mpw, biaya_mpw, kegiatan_mpw, image_mpw, id_mpw FROM tb_data";
        
        if (!keyword.isEmpty()) {
            query += " WHERE kode_mpw LIKE '%" + keyword + "%' OR tema_mpw LIKE '%" + keyword + "%' OR lokasi_mpw LIKE '%" + keyword + "%' OR tgl_mpw LIKE '%" + keyword + "%' OR biaya_mpw LIKE '%" + keyword + "%' OR kegiatan_mpw LIKE '%" + keyword + "%'";
        }
        
        ResultSet res = con.createStatement().executeQuery(query);
        model.setRowCount(0);
        
        int no = 1;
        while (res.next()) {
            String kodeMPW = res.getString(1);
            String temaMPW = res.getString(2);
            String lokasiMPW = res.getString(3);
            String tglMPW = res.getString(4);
            String biayaMPW = res.getString(5);
            String kegiatanMPW = res.getString(6);
            String imageMPW = res.getString(7);
            String idMPW = res.getString(8);
            JButton editButton = new JButton("edit");
            editButton.addActionListener(e -> {
                editForm(kodeMPW, temaMPW, lokasiMPW, tglMPW, biayaMPW, kegiatanMPW, imageMPW, idMPW);
                
            });

            Object[] data = {String.valueOf(no), kodeMPW, temaMPW, lokasiMPW, tglMPW, biayaMPW, kegiatanMPW, editButton, imageMPW, idMPW};
            model.addRow(data);
            no++;
        }
    } catch (SQLException ex) {
        Logger.getLogger(menuAdmin.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ICari;
    private javax.swing.JButton TCari;
    private javax.swing.JButton TDelete;
    private javax.swing.JButton TSimpan;
    private javax.swing.JButton back;
    private javax.swing.JLabel biaya;
    private javax.swing.JTable data;
    private javax.swing.JPanel dataShow;
    private javax.swing.JLabel gambar;
    private javax.swing.JLabel id;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kode;
    private javax.swing.JLabel lokasi;
    private javax.swing.JLabel tanggal;
    private javax.swing.JLabel tema;
    // End of variables declaration//GEN-END:variables


}
